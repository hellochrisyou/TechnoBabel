//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TBProjBackend.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class technobabeldatabaseEntities5 : DbContext
    {
        public technobabeldatabaseEntities5()
            : base("name=technobabeldatabaseEntities5")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Error> Errors { get; set; }
    
        public virtual ObjectResult<SingleIntegerResult> DoesUserExist(string emailAddress, string pass)
        {
            var emailAddressParameter = emailAddress != null ?
                new ObjectParameter("EmailAddress", emailAddress) :
                new ObjectParameter("EmailAddress", typeof(string));
    
            var passParameter = pass != null ?
                new ObjectParameter("Pass", pass) :
                new ObjectParameter("Pass", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SingleIntegerResult>("DoesUserExist", emailAddressParameter, passParameter);
        }
    
        public virtual ObjectResult<Spices> GetSaltByEmail(string email)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Spices>("GetSaltByEmail", emailParameter);
        }
    
        public virtual ObjectResult<SingleIntegerResult> InsertNewTerm(string createdUser, Nullable<int> compID, string tName, string tDecript)
        {
            var createdUserParameter = createdUser != null ?
                new ObjectParameter("CreatedUser", createdUser) :
                new ObjectParameter("CreatedUser", typeof(string));
    
            var compIDParameter = compID.HasValue ?
                new ObjectParameter("compID", compID) :
                new ObjectParameter("compID", typeof(int));
    
            var tNameParameter = tName != null ?
                new ObjectParameter("TName", tName) :
                new ObjectParameter("TName", typeof(string));
    
            var tDecriptParameter = tDecript != null ?
                new ObjectParameter("TDecript", tDecript) :
                new ObjectParameter("TDecript", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SingleIntegerResult>("InsertNewTerm", createdUserParameter, compIDParameter, tNameParameter, tDecriptParameter);
        }
    
        public virtual ObjectResult<LoginCredentials> GetLoginCredentialsByEmail(string email)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LoginCredentials>("GetLoginCredentialsByEmail", emailParameter);
        }
    
        public virtual ObjectResult<SingleIntegerResult> InsertNewUser(string createdUser, Nullable<int> compID, string email, string pass, string salt, string firstName, string lastName, string encryptType, Nullable<bool> isAdmin)
        {
            var createdUserParameter = createdUser != null ?
                new ObjectParameter("CreatedUser", createdUser) :
                new ObjectParameter("CreatedUser", typeof(string));
    
            var compIDParameter = compID.HasValue ?
                new ObjectParameter("CompID", compID) :
                new ObjectParameter("CompID", typeof(int));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passParameter = pass != null ?
                new ObjectParameter("Pass", pass) :
                new ObjectParameter("Pass", typeof(string));
    
            var saltParameter = salt != null ?
                new ObjectParameter("Salt", salt) :
                new ObjectParameter("Salt", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var encryptTypeParameter = encryptType != null ?
                new ObjectParameter("EncryptType", encryptType) :
                new ObjectParameter("EncryptType", typeof(string));
    
            var isAdminParameter = isAdmin.HasValue ?
                new ObjectParameter("IsAdmin", isAdmin) :
                new ObjectParameter("IsAdmin", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SingleIntegerResult>("InsertNewUser", createdUserParameter, compIDParameter, emailParameter, passParameter, saltParameter, firstNameParameter, lastNameParameter, encryptTypeParameter, isAdminParameter);
        }
    
        public virtual ObjectResult<SingleIntegerResult> TermExistByCompanyID(string term, Nullable<int> compID)
        {
            var termParameter = term != null ?
                new ObjectParameter("term", term) :
                new ObjectParameter("term", typeof(string));
    
            var compIDParameter = compID.HasValue ?
                new ObjectParameter("compID", compID) :
                new ObjectParameter("compID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SingleIntegerResult>("TermExistByCompanyID", termParameter, compIDParameter);
        }
    
        public virtual ObjectResult<SingleIntegerResult> ChangeActivationTermByTermID(Nullable<int> termID, string user)
        {
            var termIDParameter = termID.HasValue ?
                new ObjectParameter("TermID", termID) :
                new ObjectParameter("TermID", typeof(int));
    
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SingleIntegerResult>("ChangeActivationTermByTermID", termIDParameter, userParameter);
        }
    
        public virtual ObjectResult<SingleTerm> GetTermListByCompanyID(Nullable<int> compID)
        {
            var compIDParameter = compID.HasValue ?
                new ObjectParameter("CompID", compID) :
                new ObjectParameter("CompID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SingleTerm>("GetTermListByCompanyID", compIDParameter);
        }
    
        public virtual ObjectResult<SingleTerm> SelectTermByTermID(Nullable<int> termID)
        {
            var termIDParameter = termID.HasValue ?
                new ObjectParameter("TermID", termID) :
                new ObjectParameter("TermID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SingleTerm>("SelectTermByTermID", termIDParameter);
        }
    
        public virtual ObjectResult<SingleIntegerResult> UpdateTermByTermID(Nullable<int> termID, string tDescription, string modifiedUser)
        {
            var termIDParameter = termID.HasValue ?
                new ObjectParameter("TermID", termID) :
                new ObjectParameter("TermID", typeof(int));
    
            var tDescriptionParameter = tDescription != null ?
                new ObjectParameter("TDescription", tDescription) :
                new ObjectParameter("TDescription", typeof(string));
    
            var modifiedUserParameter = modifiedUser != null ?
                new ObjectParameter("ModifiedUser", modifiedUser) :
                new ObjectParameter("ModifiedUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SingleIntegerResult>("UpdateTermByTermID", termIDParameter, tDescriptionParameter, modifiedUserParameter);
        }
    
        public virtual ObjectResult<SingleIntegerResult> IncreaseClickCountByCompIDTermName(Nullable<int> compID, string termName)
        {
            var compIDParameter = compID.HasValue ?
                new ObjectParameter("CompID", compID) :
                new ObjectParameter("CompID", typeof(int));
    
            var termNameParameter = termName != null ?
                new ObjectParameter("TermName", termName) :
                new ObjectParameter("TermName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SingleIntegerResult>("IncreaseClickCountByCompIDTermName", compIDParameter, termNameParameter);
        }
    
        public virtual ObjectResult<SingleIntegerResult> IncreaseListenCountByCompIDTermName(Nullable<int> compID, string termName)
        {
            var compIDParameter = compID.HasValue ?
                new ObjectParameter("CompID", compID) :
                new ObjectParameter("CompID", typeof(int));
    
            var termNameParameter = termName != null ?
                new ObjectParameter("TermName", termName) :
                new ObjectParameter("TermName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SingleIntegerResult>("IncreaseListenCountByCompIDTermName", compIDParameter, termNameParameter);
        }
    
        public virtual ObjectResult<TopTenTerm> GetTopTenClickedTermsByCompID(Nullable<int> compID)
        {
            var compIDParameter = compID.HasValue ?
                new ObjectParameter("CompID", compID) :
                new ObjectParameter("CompID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TopTenTerm>("GetTopTenClickedTermsByCompID", compIDParameter);
        }
    
        public virtual ObjectResult<TopTenTerm> GetTopTenListenedTermsByCompID(Nullable<int> compID)
        {
            var compIDParameter = compID.HasValue ?
                new ObjectParameter("CompID", compID) :
                new ObjectParameter("CompID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TopTenTerm>("GetTopTenListenedTermsByCompID", compIDParameter);
        }
    
        public virtual ObjectResult<SingleIntegerResult> ChangeActivationUserByUserID(Nullable<int> userID, string user)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SingleIntegerResult>("ChangeActivationUserByUserID", userIDParameter, userParameter);
        }
    
        public virtual ObjectResult<SingleIntegerResult> UpdateUsersByUserID(Nullable<int> userID, string password, string salt, string encryptionType, string modifiedUser, string firstName, string lastName, Nullable<bool> admin)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var saltParameter = salt != null ?
                new ObjectParameter("Salt", salt) :
                new ObjectParameter("Salt", typeof(string));
    
            var encryptionTypeParameter = encryptionType != null ?
                new ObjectParameter("EncryptionType", encryptionType) :
                new ObjectParameter("EncryptionType", typeof(string));
    
            var modifiedUserParameter = modifiedUser != null ?
                new ObjectParameter("ModifiedUser", modifiedUser) :
                new ObjectParameter("ModifiedUser", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var adminParameter = admin.HasValue ?
                new ObjectParameter("Admin", admin) :
                new ObjectParameter("Admin", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SingleIntegerResult>("UpdateUsersByUserID", userIDParameter, passwordParameter, saltParameter, encryptionTypeParameter, modifiedUserParameter, firstNameParameter, lastNameParameter, adminParameter);
        }
    
        public virtual ObjectResult<UserListItem> SelectUsersByCompanyID(Nullable<int> compID)
        {
            var compIDParameter = compID.HasValue ?
                new ObjectParameter("compID", compID) :
                new ObjectParameter("compID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UserListItem>("SelectUsersByCompanyID", compIDParameter);
        }
    
        public virtual ObjectResult<UserListView> SelectUserByUserID(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UserListView>("SelectUserByUserID", userIDParameter);
        }
    
        public virtual ObjectResult<TermIDResult> GetTermIDByTermNameCompID(string termName, Nullable<int> compID)
        {
            var termNameParameter = termName != null ?
                new ObjectParameter("TermName", termName) :
                new ObjectParameter("TermName", typeof(string));
    
            var compIDParameter = compID.HasValue ?
                new ObjectParameter("CompID", compID) :
                new ObjectParameter("CompID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TermIDResult>("GetTermIDByTermNameCompID", termNameParameter, compIDParameter);
        }
    
        public virtual ObjectResult<TermList> GetTermListByPageAndCompanyID(Nullable<int> page, Nullable<int> compID)
        {
            var pageParameter = page.HasValue ?
                new ObjectParameter("Page", page) :
                new ObjectParameter("Page", typeof(int));
    
            var compIDParameter = compID.HasValue ?
                new ObjectParameter("CompID", compID) :
                new ObjectParameter("CompID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TermList>("GetTermListByPageAndCompanyID", pageParameter, compIDParameter);
        }
    
        public virtual ObjectResult<TermList> GetTermListBySearchCompany(string search, Nullable<int> compID)
        {
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var compIDParameter = compID.HasValue ?
                new ObjectParameter("CompID", compID) :
                new ObjectParameter("CompID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TermList>("GetTermListBySearchCompany", searchParameter, compIDParameter);
        }
    
        public virtual ObjectResult<SingleIntegerResult> GetPagesByCompanyIDListName(Nullable<int> compID, string listname)
        {
            var compIDParameter = compID.HasValue ?
                new ObjectParameter("compID", compID) :
                new ObjectParameter("compID", typeof(int));
    
            var listnameParameter = listname != null ?
                new ObjectParameter("listname", listname) :
                new ObjectParameter("listname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SingleIntegerResult>("GetPagesByCompanyIDListName", compIDParameter, listnameParameter);
        }
    
        public virtual ObjectResult<SingleIntegerResult> ChangePasswordByCompIDEmail(Nullable<int> compID, string email, string pass, string salt, string userEmail)
        {
            var compIDParameter = compID.HasValue ?
                new ObjectParameter("CompID", compID) :
                new ObjectParameter("CompID", typeof(int));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passParameter = pass != null ?
                new ObjectParameter("pass", pass) :
                new ObjectParameter("pass", typeof(string));
    
            var saltParameter = salt != null ?
                new ObjectParameter("salt", salt) :
                new ObjectParameter("salt", typeof(string));
    
            var userEmailParameter = userEmail != null ?
                new ObjectParameter("UserEmail", userEmail) :
                new ObjectParameter("UserEmail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SingleIntegerResult>("ChangePasswordByCompIDEmail", compIDParameter, emailParameter, passParameter, saltParameter, userEmailParameter);
        }
    
        public virtual ObjectResult<SingleIntegerResult> UpdateUsersByUserIDWithoutPass(Nullable<int> userID, string modifiedUser, string firstName, string lastName, Nullable<bool> admin)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var modifiedUserParameter = modifiedUser != null ?
                new ObjectParameter("ModifiedUser", modifiedUser) :
                new ObjectParameter("ModifiedUser", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var adminParameter = admin.HasValue ?
                new ObjectParameter("Admin", admin) :
                new ObjectParameter("Admin", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SingleIntegerResult>("UpdateUsersByUserIDWithoutPass", userIDParameter, modifiedUserParameter, firstNameParameter, lastNameParameter, adminParameter);
        }
    
        public virtual ObjectResult<SingleIntegerResult> ChangeNeedsPassResetByUserID(Nullable<int> userID, string user)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SingleIntegerResult>("ChangeNeedsPassResetByUserID", userIDParameter, userParameter);
        }
    
        public virtual ObjectResult<UserListItem> GetUserListByPageAndCompanyID(Nullable<int> page, Nullable<int> compID)
        {
            var pageParameter = page.HasValue ?
                new ObjectParameter("Page", page) :
                new ObjectParameter("Page", typeof(int));
    
            var compIDParameter = compID.HasValue ?
                new ObjectParameter("CompID", compID) :
                new ObjectParameter("CompID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UserListItem>("GetUserListByPageAndCompanyID", pageParameter, compIDParameter);
        }
    
        public virtual ObjectResult<UserListItem> GetUserListBySearchCompany(string search, Nullable<int> compID)
        {
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var compIDParameter = compID.HasValue ?
                new ObjectParameter("CompID", compID) :
                new ObjectParameter("CompID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UserListItem>("GetUserListBySearchCompany", searchParameter, compIDParameter);
        }
    
        public virtual ObjectResult<FrequencyCombinedListItem> GetFrequencyListByPageAndCompanyID(Nullable<int> page, Nullable<int> compID, Nullable<bool> listened)
        {
            var pageParameter = page.HasValue ?
                new ObjectParameter("Page", page) :
                new ObjectParameter("Page", typeof(int));
    
            var compIDParameter = compID.HasValue ?
                new ObjectParameter("CompID", compID) :
                new ObjectParameter("CompID", typeof(int));
    
            var listenedParameter = listened.HasValue ?
                new ObjectParameter("Listened", listened) :
                new ObjectParameter("Listened", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FrequencyCombinedListItem>("GetFrequencyListByPageAndCompanyID", pageParameter, compIDParameter, listenedParameter);
        }
    
        public virtual ObjectResult<SingleIntegerResult> ChangeNeedsPassResetByUserEmail(string user)
        {
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SingleIntegerResult>("ChangeNeedsPassResetByUserEmail", userParameter);
        }
    
        public virtual ObjectResult<SingleIntegerResult> authorizationTest()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SingleIntegerResult>("authorizationTest");
        }
    
        public virtual ObjectResult<FullTermList> GetFullTermListByCompanyID(Nullable<int> compID)
        {
            var compIDParameter = compID.HasValue ?
                new ObjectParameter("CompID", compID) :
                new ObjectParameter("CompID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FullTermList>("GetFullTermListByCompanyID", compIDParameter);
        }
    
        public virtual ObjectResult<FullUserList> GetFullUserListByCompanyID(Nullable<int> compID)
        {
            var compIDParameter = compID.HasValue ?
                new ObjectParameter("CompID", compID) :
                new ObjectParameter("CompID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FullUserList>("GetFullUserListByCompanyID", compIDParameter);
        }
    
        public virtual ObjectResult<SingleCompanyIDResult> GetCompanyIDByCompanyName(string compname)
        {
            var compnameParameter = compname != null ?
                new ObjectParameter("compname", compname) :
                new ObjectParameter("compname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SingleCompanyIDResult>("GetCompanyIDByCompanyName", compnameParameter);
        }
    }
}
